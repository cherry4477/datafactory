package v1

// This file contains methods that can be used by the go-restful package to generate Swagger
// documentation for the object types found in 'types.go' This file is automatically generated
// by hack/update-generated-swagger-descriptions.sh and should be run after a full build of OpenShift.
// ==== DO NOT EDIT THIS FILE MANUALLY ====

var map_BackingService = map[string]string{
	"":         "BackingService describe a BackingService",
	"metadata": "Standard object's metadata.",
	"spec":     "Spec defines the behavior of the Namespace.",
	"status":   "Status describes the current status of a Namespace",
}

func (BackingService) SwaggerDoc() map[string]string {
	return map_BackingService
}

var map_BackingServiceList = map[string]string{
	"":         "BackingServiceList describe a list of BackingService",
	"metadata": "Standard object's metadata.",
	"items":    "Items is a list of routes",
}

func (BackingServiceList) SwaggerDoc() map[string]string {
	return map_BackingServiceList
}

var map_BackingServiceSpec = map[string]string{
	"":                 "BackingServiceSpec describe the attributes on a Backingservice",
	"name":             "name of backingservice",
	"id":               "id of backingservice",
	"description":      "description of a backingservice",
	"bindable":         "is backingservice bindable",
	"plan_updateable":  "is  backingservice plan updateable",
	"tags":             "list of backingservice tags of BackingService",
	"requires":         "require condition of backingservice",
	"metadata":         "metadata of backingservice",
	"plans":            "plans of a backingservice",
	"dashboard_client": "DashboardClient of backingservic",
}

func (BackingServiceSpec) SwaggerDoc() map[string]string {
	return map_BackingServiceSpec
}

var map_BackingServiceStatus = map[string]string{
	"":      "ProjectStatus is information about the current status of a Project",
	"phase": "phase is the current lifecycle phase of the servicebroker",
}

func (BackingServiceStatus) SwaggerDoc() map[string]string {
	return map_BackingServiceStatus
}

var map_ServiceDashboardClient = map[string]string{
	"":             "ServiceDashboardClient describe a ServiceDashboardClient",
	"id":           "id of a ServiceDashboardClient",
	"secret":       "secret of a ServiceDashboardClient",
	"redirect_uri": "redirect uri of a ServiceDashboardClient",
}

func (ServiceDashboardClient) SwaggerDoc() map[string]string {
	return map_ServiceDashboardClient
}

var map_ServiceMetadata = map[string]string{
	"":                    "ServiceMetadata describe a ServiceMetadata",
	"displayName":         "displayname of a ServiceMetadata",
	"imageUrl":            "imageurl of a ServiceMetadata",
	"longDescription":     "long description of a ServiceMetadata",
	"providerDisplayName": "providerdisplayname of a ServiceMetadata",
	"documentationUrl":    "documrntation url of a ServiceMetadata",
	"supportUrl":          "support url of a ServiceMetadata",
}

func (ServiceMetadata) SwaggerDoc() map[string]string {
	return map_ServiceMetadata
}

var map_ServicePlan = map[string]string{
	"":            "ServicePlan describe a ServicePlan",
	"name":        "name of a ServicePlan",
	"id":          "id of a ServicePlan",
	"description": "description of a ServicePlan",
	"metadata":    "metadata of a ServicePlan",
	"free":        "is this plan free or not",
}

func (ServicePlan) SwaggerDoc() map[string]string {
	return map_ServicePlan
}

var map_ServicePlanCost = map[string]string{
	"":       "ServicePlanCost describe a ServicePlanCost",
	"amount": "amount of a ServicePlanCost",
	"unit":   "unit of a ServicePlanCost",
}

func (ServicePlanCost) SwaggerDoc() map[string]string {
	return map_ServicePlanCost
}

var map_ServicePlanMetadata = map[string]string{
	"":            "ServicePlanMetadata describe a ServicePlanMetadata",
	"bullets":     "bullets of a ServicePlanMetadata",
	"costs":       "costs of a ServicePlanMetadata",
	"displayName": "displayname of a ServicePlanMetadata",
}

func (ServicePlanMetadata) SwaggerDoc() map[string]string {
	return map_ServicePlanMetadata
}
