
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.origin.pkg.backingservice.api.v1;

import "k8s.io/kubernetes/pkg/api/unversioned/generated.proto";
import "k8s.io/kubernetes/pkg/api/v1/generated.proto";
import "k8s.io/kubernetes/pkg/runtime/generated.proto";
import "k8s.io/kubernetes/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// BackingService describe a BackingService
message BackingService {
  // Standard object's metadata.
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the Namespace.
  optional BackingServiceSpec spec = 2;

  // Status describes the current status of a Namespace
  optional BackingServiceStatus status = 3;
}

// BackingServiceList describe a list of BackingService
message BackingServiceList {
  // Standard object's metadata.
  optional k8s.io.kubernetes.pkg.api.unversioned.ListMeta metadata = 1;

  // Items is a list of routes
  repeated BackingService items = 2;
}

// BackingServiceSpec describe the attributes on a Backingservice
message BackingServiceSpec {
  // name of backingservice
  optional string name = 1;

  // id of backingservice
  optional string id = 2;

  // description of a backingservice
  optional string description = 3;

  // is backingservice bindable
  optional bool bindable = 4;

  // is  backingservice plan updateable
  optional bool plan_updateable = 5;

  // list of backingservice tags of BackingService
  repeated string tags = 6;

  // require condition of backingservice
  repeated string requires = 7;

  // metadata of backingservice
  map<string, string> metadata = 8;

  // plans of a backingservice
  repeated ServicePlan plans = 9;

  // DashboardClient of backingservic
  map<string, string> dashboard_client = 10;
}

// ProjectStatus is information about the current status of a Project
message BackingServiceStatus {
  // phase is the current lifecycle phase of the servicebroker
  optional string phase = 1;
}

// ServiceDashboardClient describe a ServiceDashboardClient
message ServiceDashboardClient {
  // id of a ServiceDashboardClient
  optional string id = 1;

  // secret of a ServiceDashboardClient
  optional string secret = 2;

  // redirect uri of a ServiceDashboardClient
  optional string redirect_uri = 3;
}

// ServiceMetadata describe a ServiceMetadata
message ServiceMetadata {
  // displayname of a ServiceMetadata
  optional string displayName = 1;

  // imageurl of a ServiceMetadata
  optional string imageUrl = 2;

  // long description of a ServiceMetadata
  optional string longDescription = 3;

  // providerdisplayname of a ServiceMetadata
  optional string providerDisplayName = 4;

  // documrntation url of a ServiceMetadata
  optional string documentationUrl = 5;

  // support url of a ServiceMetadata
  optional string supportUrl = 6;
}

// ServicePlan describe a ServicePlan
message ServicePlan {
  // name of a ServicePlan
  optional string name = 1;

  // id of a ServicePlan
  optional string id = 2;

  // description of a ServicePlan
  optional string description = 3;

  // metadata of a ServicePlan
  optional ServicePlanMetadata metadata = 4;

  // is this plan free or not
  optional bool free = 5;
}

// ServicePlanCost describe a ServicePlanCost
message ServicePlanCost {
  // amount of a ServicePlanCost
  map<string, double> monitors = 1;

  // unit of a ServicePlanCost
  optional string unit = 2;
}

// ServicePlanMetadata describe a ServicePlanMetadata
message ServicePlanMetadata {
  // bullets of a ServicePlanMetadata
  repeated string bullets = 1;

  // costs of a ServicePlanMetadata
  repeated ServicePlanCost costs = 2;

  // displayname of a ServicePlanMetadata
  optional string displayName = 3;
}

